import randomNumber from '../Utilities/RandomNumber';
import { createMusicFromPhrase } from '../MusicGenerator/Phrase';

export const createBar = notesArr => {
	return notesArr.reduce((acc, curr) => {
		acc += createBeatNotes(curr);
		return acc;
	}, '');
};

export const createBeatNotes = note => {
	// For now beatLength is always 1
	var output = '';

	var octave = randomNumber(0, 1) ? '/4 ' : '/5 ';
	// var isRest = randomNumber(1, 5) === 1 ? true : false;
	output += oneBeatOutput(note.duration);

	if (note.isRest) {
		// rests
		output += ' ## ';
	} else {
		output += ` ${note.note.name} ${octave}`;
	}

	// // Triplets
	// if (notesToMake === 3 && !isRest) {
	//     output += ' ^3^ ';
	// }

	return output;
};

export const oneBeatOutput = duration => {
	let output = '';
	switch (duration) {
		case 0.25:
			output = ':16';
			break;
		case 0.5:
			output = ':8';
			break;
		case 0.75:
			output = ':8d';
			break;
		case 1:
			output = ':4';
			break;
		case 1.5:
			output = ':4d';
			break;
		case 2:
			output = ':2';
			break;
		case 3:
			output = ':2d';
			break;
		case 4:
			output = ':1';
			break;
		default:
	}

	return output;
};

export const generateMusicFromObject = songAttributes => {
	let output = 'options player=true \n';
	output += 'tabstave notation=true tablature=false';
	output += ' key=' + songAttributes.scale.keyName;
	output += ' clef=' + songAttributes.clef;
	output += ' time=' + songAttributes.timeSignature + '\n';

	// TODO: automate creation of phrases
	// output += createPhrase(4, 3, songAttributes.scale.keyName, songAttributes.scale.notes, songAttributes.progression);
	output += createMusicFromPhrase(songAttributes.mainPhrase, true);
	output +=
		'\n\ntext :h, Music generated by Sheet Music Generator created by Carlo Cruz ';
	output += '\ntabstave notation=true tablature=false clef=none';
	output += createMusicFromPhrase(songAttributes.mainPhrase, false, true);
	output += '\ntabstave notation=true tablature=false clef=none';
	output += createMusicFromPhrase(songAttributes.bridgePhrase);
	output += '\ntabstave notation=true tablature=false clef=none';
	output += createMusicFromPhrase(songAttributes.bridgePhrase);
	output += '\ntabstave notation=true tablature=false clef=none';
	output += createMusicFromPhrase(songAttributes.endingPhrase);
	output += '\ntabstave notation=true tablature=false clef=none';
	output += createMusicFromPhrase(songAttributes.endingPhrase);


	return output;
};

export const createMusicFromArray = (musicArr, startRepeat, endRepeat) => {
	let output = musicArr.reduce((acc, curr) => {
		acc += createBar(curr) + ' | ';
		return acc;
	}, '');

	let firstBar = '\n notes ';
	if (startRepeat) {
		firstBar = '\n notes =|: ';
	}

	if (endRepeat) {
		output = output.slice(0, -3) + ' =:| ';
	}

	console.log(output);

	return firstBar + output;
};

export default {
	createMusicFromArray
};
