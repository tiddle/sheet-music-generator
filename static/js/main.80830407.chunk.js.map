{"version":3,"sources":["Utilities/RandomNumber.js","MusicGenerator/Note.js","MusicGenerator/Scale.js","MusicGenerator/Phrase.js","VexflowInterface/VexflowInterface.js","MusicGenerator/MusicGenerator.js","SheetMusic/SheetMusic.jsx","App.jsx","index.js"],"names":["randomNumber","min","max","exclude","minNum","maxNum","result","Math","floor","random","indexOf","notes","name","flat","scaleCreator","keyName","splitNotes","reduce","acc","curr","toUpperCase","found","before","push","after","concat","_reorderNotes","index","createMusicFromPhrase","musicArr","startRepeat","arguments","length","undefined","endRepeat","phrase","durationArr","changeIntervalArr","duration","changeInterval","currentChord","isRest","note","createMusicFromArray","selectNoteDuration","notLongerThan","validChoices","createBarDuration","beats","choices","output","currNote","isTriplet","createPhrase","beatsInBar","phraseBarDuration","keyNotes","progression","bars","map","chordNum","basicChord","createChord","arr","places","newArr","e","removedNotes","splice","rotates","durationPhrase","amountOfBars","cleanUpMusicArr","createDurationPhrase","progressionArr","extraChords","i","bar","pop","calculateChordChangeInterval","notesArr","createBeatNotes","octave","oneBeatOutput","firstBar","slice","console","log","MusicGenerator","currentAttributes","selectProgression","num","createMusicAttr","musicAttributes","attributes","Object","assign","key","timeSignature","selectedKeys","availableKeys","createKey","scale","clef","mainPhrase","bridgePhrase","endingPhrase","createSong","songAttributes","generateMusicFromObject","SheetMusic","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","musicAttr","setMusicAttributes","sheetMusic","VexTab","vextab","Artist","Renderer","Flow","render","document","getElementById","Backends","CANVAS","artist","parse","React","Component","App","state","bind","assertThisInitialized","attrArr","setState","react_default","a","createElement","className","src_SheetMusic_SheetMusic","ReactDOM","src_App_0"],"mappings":"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","file":"static/js/main.80830407.chunk.js","sourcesContent":["const randomNumber = (min, max, exclude) => {\r\n    var minNum = (min || 0);\r\n    var maxNum = (max || 0);\r\n\r\n    let result = Math.floor(Math.random() * (maxNum - minNum + 1)) + min;\r\n    if ((exclude || []).indexOf(result) !== -1) {\r\n        result = randomNumber(min, max, exclude);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport default randomNumber;","export const notes = [{\n        name: 'A'\n    },\n    {\n        name: 'A#',\n        flat: 'Bb'\n    },\n    {\n        name: 'B',\n    },\n    {\n        name: 'C'\n    },\n    {\n        name: 'C#',\n        flat: 'Db'\n    },\n    {\n        name: 'D',\n    },\n    {\n        name: 'D#',\n        flat: 'Eb'\n    },\n    {\n        name: 'E'\n    },\n    {\n        name: 'F'\n    },\n    {\n        name: 'F#',\n        flat: 'Gb'\n    },\n    {\n        name: 'G'\n    },\n    {\n        name: 'G#',\n        flat: 'Ab'\n    }\n];","import {\n    notes\n} from './Note';\n\nimport randomNumber from '../Utilities/RandomNumber';\n\n/**\n * Reorder notes to have base note first\n * @param {string} keyName \n */\nconst _reorderNotes = (keyName) => {\n    let splitNotes = notes.reduce((acc, curr) => {\n        // Split notes into 2 arrays to combine later\n        if (curr.name.toUpperCase() === keyName.toUpperCase()) {\n            acc.found = true;\n        }\n\n        if (acc.found) {\n            acc.before.push(curr);\n        } else {\n            acc.after.push(curr);\n        }\n\n        return acc;\n\n\n    }, {\n        before: [],\n        after: [],\n        found: false\n    });\n\n    return splitNotes.before.concat(splitNotes.after);\n}\n\n/**\n * Create scale of notes for a key\n * @param {string} keyName \n */\nexport const scaleCreator = (keyName) => {\n    // Major = R,W,W,H,W,W,W,H\n    return _reorderNotes(keyName).reduce((acc, curr, index) => {\n        let majorNotes = [0, 2, 4, 5, 7, 9, 11, 12];\n\n        if (majorNotes.indexOf(index) !== -1) {\n            acc.push(curr);\n        }\n\n        return acc;\n\n    }, []);\n};\n\n/**\n * Select a key from an array of keys\n * @param {array} selectedKeys \n */\nexport const createKey = (selectedKeys) => {\n    const keys = ['C', 'Am', 'F', 'Dm', 'Bb', 'Gm', 'Eb', 'Cm',\n        'Ab', 'Fm', 'Db', 'Bbm', 'Gb', 'Ebm', 'Cb', 'Abm', 'G',\n        'Em', 'D', 'Bm', 'A', 'F#m', 'E', 'C#m', 'B', 'G#m', 'F#',\n        'D#m', 'C#', 'A#m'\n    ];\n    const availableKeys = (selectedKeys || keys);\n\n    return availableKeys[randomNumber(0, availableKeys.length - 1)];\n}","import randomNumber from '../Utilities/RandomNumber';\nimport { createMusicFromArray } from '../VexflowInterface/VexflowInterface';\n\n/**\n * Rotate an array a certain amount\n * @param {array} arr - array to rotate\n * @param {number} places - number of places to rotate\n */\nexport const rotates = (arr, places) => {\n\tlet newArr = arr.map(e => e); // duplicate for modification\n\tlet removedNotes = newArr.splice(0, places);\n\n\tlet output = newArr.concat(removedNotes);\n\treturn output;\n};\n\n/**\n * Apply notes to a duration\n * @param {array} durationArr\n * @param {array} changeIntervalArr\n */\nexport const applyNotesToDuration = (durationArr, changeIntervalArr) => {\n\treturn durationArr.reduce((acc, curr, index) => {\n\t\tlet currentChord = changeIntervalArr[0];\n\n\t\tif (changeIntervalArr.length !== 1) {\n\t\t\t// TODO: this branch\n\t\t}\n\n\t\tif (!curr.isRest) {\n\t\t\tcurr.note = currentChord[randomNumber(0, currentChord.length - 1)];\n\t\t}\n\n\t\tacc.push(curr);\n\n\t\treturn acc;\n\t}, []);\n};\n\n/**\n * Create music from a phrase\n * @param {array} musicArr\n */\nexport const createMusicFromPhrase = (\n\tmusicArr,\n\tstartRepeat = false,\n\tendRepeat = false\n) => {\n\tlet phrase = musicArr.reduce((acc, curr) => {\n\t\tacc.push(applyNotesToDuration(curr.duration, curr.changeInterval));\n\t\treturn acc;\n\t}, []);\n\n\treturn createMusicFromArray(phrase, startRepeat, endRepeat);\n};\n\n/**\n * Create a chord\n * @param {array} notes\n * @param {number} chordNum\n */\nexport const createChord = (notes, chordNum) => {\n\t// TODO: Handle different chord types\n\t// 1-3-5-7 to start with (Major 7th)\n\tlet basicChord = [1, 3, 5, 7];\n\tlet output = notes.reduce((acc, curr, index) => {\n\t\tif (basicChord.indexOf(index + 1) !== -1) {\n\t\t\tacc.push(curr);\n\t\t}\n\n\t\treturn acc;\n\t}, []);\n\n\treturn output;\n};\n\n/**\n * Randomly select a note duration\n * @param {array} durationArr\n * @param {number} notLongerThan\n */\nexport const selectNoteDuration = (durationArr, notLongerThan) => {\n\tlet validChoices = durationArr.reduce((acc, curr) => {\n\t\tif (curr <= notLongerThan) {\n\t\t\tacc.push(curr);\n\t\t}\n\n\t\treturn acc;\n\t}, []);\n\n\t// Fix for odd counts\n\tif (validChoices.length === 0) {\n\t\tvalidChoices = [0.25];\n\t}\n\n\treturn validChoices[randomNumber(0, validChoices.length - 1)];\n};\n\n/**\n * Create notes for a bar\n * @param {number} beats\n */\nexport const createBarDuration = beats => {\n\t// Removed 0.25, makes the music too hard\n\t// Removed 0.75, makes the music generation weird\n\tconst choices = [0.5, 1, 1.5, 2, 3, 4];\n\n\tlet output = [];\n\twhile (beats > 0) {\n\t\tlet currNote = {};\n\t\tlet duration = selectNoteDuration(choices, beats);\n\n\t\tcurrNote.duration = duration;\n\t\tcurrNote.isRest = randomNumber(0, 4) === 0;\n\n\t\tif (duration === 1 && !currNote.isRest) {\n\t\t\tcurrNote.isTriplet = randomNumber(0, 1) === 0;\n\t\t}\n\n\t\toutput.push(currNote);\n\n\t\tbeats -= duration;\n\t}\n\n\treturn output;\n};\n\n/**\n * Create a phrase with a set duration\n * @param {number} beatsInBar\n * @param {number} amountOfBars\n */\nexport const createDurationPhrase = (beatsInBar, amountOfBars) => {\n\tlet output = [];\n\n\twhile (amountOfBars > 0) {\n\t\tamountOfBars--;\n\t\toutput.push(createBarDuration(beatsInBar));\n\t}\n\n\toutput = cleanUpMusicArr(output);\n\n\treturn output;\n};\n\nexport const calculateChordChangeInterval = (amountOfBars, progressionArr) => {\n\t// TODO: Handle when amountOfBars > progressionArr\n\tlet extraChords = progressionArr.length % amountOfBars;\n\n\tif (amountOfBars / progressionArr.length === 1) {\n\t\tamountOfBars *= 2;\n\t}\n\n\tlet output = [];\n\tfor (let i = 0; i < amountOfBars; i++) {\n\t\tlet bar = [];\n\t\tif (extraChords > 0 && i === 0) {\n\t\t\tif (randomNumber(0, 1) === 0) {\n\t\t\t\tbar.push(progressionArr.pop());\n\t\t\t\textraChords = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (extraChords > 0 && i === amountOfBars - 1) {\n\t\t\tbar.push(progressionArr.pop());\n\t\t}\n\n\t\tbar.push(progressionArr.pop());\n\t\toutput.push(bar);\n\t}\n\n\treturn output;\n};\n\nexport const createPhrase = (\n\tbeatsInBar,\n\tphraseBarDuration,\n\tkeyNotes,\n\tprogression\n) => {\n\t// Main bit is here\n\t// TODO: Create a duration so that it's not 1 chord per bar\n\t// TODO: Turn this into duration base first, then apply the notes afterwards\n\n\tlet bars = progression.map((curr, index) => {\n\t\tlet adjustedScale = rotates(keyNotes, curr - 1);\n\t\treturn createChord(adjustedScale);\n\t});\n\n\tconst durationPhrase = createDurationPhrase(beatsInBar, phraseBarDuration);\n\tconst changeInterval = calculateChordChangeInterval(\n\t\tphraseBarDuration,\n\t\tbars\n\t);\n\n\treturn durationPhrase.reduce((acc, curr, index) => {\n\t\tacc.push({\n\t\t\tduration: curr,\n\t\t\tchangeInterval: changeInterval[index]\n\t\t});\n\n\t\treturn acc;\n\t}, []);\n};\n\nexport const cleanUpMusicArr = notesArr => {\n\treturn notesArr.reduce((acc, curr) => {\n\t\tif (acc.length > 0) {\n\t\t\tif (acc[acc.length - 1].isRest && curr.isRest) {\n\t\t\t\tacc[acc.length - 1].duration += curr.duration;\n\t\t\t\treturn acc;\n\t\t\t}\n\t\t}\n\n\t\tacc.push(curr);\n\t\treturn acc;\n\t}, []);\n};\n","import randomNumber from '../Utilities/RandomNumber';\r\nimport { createMusicFromPhrase } from '../MusicGenerator/Phrase';\r\n\r\nexport const createBar = notesArr => {\r\n\treturn notesArr.reduce((acc, curr) => {\r\n\t\tacc += createBeatNotes(curr);\r\n\t\treturn acc;\r\n\t}, '');\r\n};\r\n\r\nexport const createBeatNotes = note => {\r\n\t// For now beatLength is always 1\r\n\tvar output = '';\r\n\r\n\tvar octave = randomNumber(0, 1) ? '/4 ' : '/5 ';\r\n\t// var isRest = randomNumber(1, 5) === 1 ? true : false;\r\n\toutput += oneBeatOutput(note.duration);\r\n\r\n\tif (note.isRest) {\r\n\t\t// rests\r\n\t\toutput += ' ## ';\r\n\t} else {\r\n\t\toutput += ` ${note.note.name} ${octave}`;\r\n\t}\r\n\r\n\t// // Triplets\r\n\t// if (notesToMake === 3 && !isRest) {\r\n\t//     output += ' ^3^ ';\r\n\t// }\r\n\r\n\treturn output;\r\n};\r\n\r\nexport const oneBeatOutput = duration => {\r\n\tlet output = '';\r\n\tswitch (duration) {\r\n\t\tcase 0.25:\r\n\t\t\toutput = ':16';\r\n\t\t\tbreak;\r\n\t\tcase 0.5:\r\n\t\t\toutput = ':8';\r\n\t\t\tbreak;\r\n\t\tcase 0.75:\r\n\t\t\toutput = ':8d';\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\toutput = ':4';\r\n\t\t\tbreak;\r\n\t\tcase 1.5:\r\n\t\t\toutput = ':4d';\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\toutput = ':2';\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\toutput = ':2d';\r\n\t\t\tbreak;\r\n\t\tcase 4:\r\n\t\t\toutput = ':1';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t}\r\n\r\n\treturn output;\r\n};\r\n\r\nexport const generateMusicFromObject = songAttributes => {\r\n\tlet output = 'options player=true \\n';\r\n\toutput += 'tabstave notation=true tablature=false';\r\n\toutput += ' key=' + songAttributes.scale.keyName;\r\n\toutput += ' clef=' + songAttributes.clef;\r\n\toutput += ' time=' + songAttributes.timeSignature + '\\n';\r\n\r\n\t// TODO: automate creation of phrases\r\n\t// output += createPhrase(4, 3, songAttributes.scale.keyName, songAttributes.scale.notes, songAttributes.progression);\r\n\toutput += createMusicFromPhrase(songAttributes.mainPhrase, true);\r\n\toutput +=\r\n\t\t'\\n\\ntext :h, Music generated by Sheet Music Generator created by Carlo Cruz ';\r\n\toutput += '\\ntabstave notation=true tablature=false clef=none';\r\n\toutput += createMusicFromPhrase(songAttributes.mainPhrase, false, true);\r\n\toutput += '\\ntabstave notation=true tablature=false clef=none';\r\n\toutput += createMusicFromPhrase(songAttributes.bridgePhrase);\r\n\toutput += '\\ntabstave notation=true tablature=false clef=none';\r\n\toutput += createMusicFromPhrase(songAttributes.bridgePhrase);\r\n\toutput += '\\ntabstave notation=true tablature=false clef=none';\r\n\toutput += createMusicFromPhrase(songAttributes.endingPhrase);\r\n\toutput += '\\ntabstave notation=true tablature=false clef=none';\r\n\toutput += createMusicFromPhrase(songAttributes.endingPhrase);\r\n\r\n\r\n\treturn output;\r\n};\r\n\r\nexport const createMusicFromArray = (musicArr, startRepeat, endRepeat) => {\r\n\tlet output = musicArr.reduce((acc, curr) => {\r\n\t\tacc += createBar(curr) + ' | ';\r\n\t\treturn acc;\r\n\t}, '');\r\n\r\n\tlet firstBar = '\\n notes ';\r\n\tif (startRepeat) {\r\n\t\tfirstBar = '\\n notes =|: ';\r\n\t}\r\n\r\n\tif (endRepeat) {\r\n\t\toutput = output.slice(0, -3) + ' =:| ';\r\n\t}\r\n\r\n\tconsole.log(output);\r\n\r\n\treturn firstBar + output;\r\n};\r\n\r\nexport default {\r\n\tcreateMusicFromArray\r\n};\r\n","import randomNumber from '../Utilities/RandomNumber';\nimport { dumper } from 'dumper';\nimport { scaleCreator, createKey } from '../MusicGenerator/Scale';\nimport { generateMusicFromObject } from '../VexflowInterface/VexflowInterface';\nimport { createPhrase } from '../MusicGenerator/Phrase';\n\n/**\n * Music Generator\n * @param\n */\nconst MusicGenerator = () => {\n\tlet currentAttributes = {};\n\t// 1, 4, 5 Major\n\t// 2, 3, 6 minor\n\t// 7 Diminished\n\tconst progression = [\n\t\t[1, 6, 2, 5], // Pop/rock\n\t\t[1, 2, 5, 1],\n\t\t[1, 4, 5, 1],\n\t\t[1, 6, 4, 5],\n\t\t[1, 4, 6, 5],\n\t\t[1, 5, 6, 4]\n\t];\n\n\tconst selectProgression = (num = false) => {\n\t\tif (!num) {\n\t\t\treturn progression[randomNumber(0, progression.length - 1)];\n\t\t}\n\n\t\treturn progression[num];\n\t};\n\n\tfunction createClef() {\n\t\treturn 'treble';\n\t}\n\n\tfunction createTime() {\n\t\treturn '4/4';\n\t}\n\n\tconst createSong = (songAttributes, createMusicFromPhrase) => {\n\t\tconst output = generateMusicFromObject(\n\t\t\tsongAttributes,\n\t\t\tcreateMusicFromPhrase\n\t\t);\n\t\treturn output;\n\t};\n\n\tconst createMusicAttr = musicAttributes => {\n\t\tconst attributes = Object.assign(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tkey: false,\n\t\t\t\ttimeSignature: false,\n\t\t\t\tprogression: false\n\t\t\t},\n\t\t\tmusicAttributes\n\t\t);\n\n\t\tconst key = createKey(attributes.key);\n\t\tcurrentAttributes = {\n\t\t\tscale: {\n\t\t\t\tkeyName: key,\n\t\t\t\tnotes: scaleCreator(key)\n\t\t\t},\n\t\t\ttimeSignature: createTime(attributes.timeSignature),\n\t\t\tprogression: selectProgression(attributes.progression),\n\t\t\tclef: createClef()\n\t\t};\n\n\t\tcurrentAttributes.mainPhrase = createPhrase(\n\t\t\t4,\n\t\t\t4,\n\t\t\tcurrentAttributes.scale.notes,\n\t\t\tcurrentAttributes.progression\n\t\t);\n\n\t\tcurrentAttributes.bridgePhrase = createPhrase(\n\t\t\t4,\n\t\t\t4,\n\t\t\tcurrentAttributes.scale.notes,\n\t\t\tcurrentAttributes.progression\n        );\n\n\t\tcurrentAttributes.endingPhrase = createPhrase(\n\t\t\t4,\n\t\t\t4,\n\t\t\tcurrentAttributes.scale.notes,\n\t\t\tcurrentAttributes.progression\n\t\t);\n\n\n\t\treturn currentAttributes;\n\t};\n\n\treturn {\n\t\tcreateMusicAttr,\n\t\tcreateSong\n\t};\n};\n\nexport default MusicGenerator;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport vextab from 'vextab/releases/vextab-div';\nimport MusicGenerator from '../MusicGenerator/MusicGenerator';\n\nclass SheetMusic extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.MusicGenerator = MusicGenerator();\n\t}\n\n\tcomponentDidMount() {\n\t\tlet musicAttr = this.MusicGenerator.createMusicAttr();\n\t\tthis.props.setMusicAttributes(musicAttr);\n\t\tthis.sheetMusic = this.MusicGenerator.createSong(musicAttr);\n\n\t\tlet VexTab = vextab.VexTab;\n\t\tlet Artist = vextab.Artist;\n\t\tlet Renderer = vextab.Flow.Renderer;\n\n\t\tlet render = new Renderer(\n\t\t\tdocument.getElementById('music'),\n\t\t\tRenderer.Backends.CANVAS\n\t\t);\n\t\tlet artist = new Artist(10, 10, 1024, {\n\t\t\tscale: 1\n\t\t});\n\t\tlet vextabOutput = new VexTab(artist);\n\t\tvextabOutput.parse(this.sheetMusic);\n\t\tlet output = artist.render(render);\n\n\t\treturn output;\n\n\t\t// let VexTab = vextab.VexTab;\n\t\t// let Artist = vextab.Artist;\n\t\t// let Renderer = vextab.Vex.Flow.Renderer;\n\n\t\t// // Create VexFlow Renderer from canvas element with id #boo.\n\t\t// let renderer = new Renderer(document.getElementById('music'), Renderer.Backends.CANVAS);\n\n\t\t// // For SVG, you can use the following line (make sure #boo is a div element)\n\t\t// // renderer = new Renderer($('#boo')[0], Renderer.Backends.SVG);\n\n\t\t// // Initialize VexTab artist and parser.\n\t\t// let artist = new Artist(10, 10, 600, { scale: 0.8 });\n\t\t// let vt = new VexTab(artist);\n\n\t\t// try {\n\t\t// \t// Parse VexTab music notation passed in as a string.\n\t\t// \tvt.parse('tabstave notation=true\\n notes :q 4/4\\n');\n\n\t\t// \t// Render notation onto canvas.\n\t\t// \tartist.render(renderer);\n\t\t// } catch (e) {\n\t\t// \tconsole.log(e);\n\t\t// }\n\t}\n\n\trender() {\n\t\treturn null;\n\t}\n}\n\nSheetMusic.propTypes = {\n\tsetMusicAttributes: PropTypes.func.isRequired\n};\n\nexport default SheetMusic;\n","import React from 'react';\n\nimport './App.css';\nimport SheetMusic from './SheetMusic/SheetMusic.jsx';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmusicAttr: {\n\t\t\t\tscale: {\n\t\t\t\t\tkeyName: ''\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.setMusicAttributes = this.setMusicAttributes.bind(this);\n\t}\n\n\tsetMusicAttributes(attrArr) {\n\t\tthis.setState({ musicAttr: attrArr });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Sheet Music Generator</h1>\n\t\t\t\t<p>\n\t\t\t\t\tCreates a 4 bar phrase in the key of{' '}\n\t\t\t\t\t{this.state.musicAttr.scale.keyName}. In 6 variations of the\n\t\t\t\t\tsame progression.\n\t\t\t\t</p>\n\t\t\t\t<SheetMusic setMusicAttributes={this.setMusicAttributes} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App.jsx';\n\nimport './index.css';\n\nReactDOM.render( < App / > ,\n  document.getElementById('root')\n);"],"sourceRoot":""}